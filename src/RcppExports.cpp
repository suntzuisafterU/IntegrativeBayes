// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// zinb_w_cov
// TODO: Aaron: Here is the MCMC implementation? List zinb_w_cov(NumericMatrix Y_mat, NumericMatrix X_mat, NumericVector z_vec, NumericVector s_vec, double tau_mukj, int S, double burn_rate, double tau_mu0, double tau_phi, double tau_beta, double a_omega, double b_omega, double a_pi, double b_pi, double a_p, double b_p, double a_mu, double b_mu, double a_phi, double b_phi, double a_beta, double b_beta, double mu0_mean, double beta_lim);
RcppExport SEXP _IntegrativeBayes_zinb_w_cov(SEXP Y_matSEXP, SEXP X_matSEXP, SEXP z_vecSEXP, SEXP s_vecSEXP, SEXP tau_mukjSEXP, SEXP SSEXP, SEXP burn_rateSEXP, SEXP tau_mu0SEXP, SEXP tau_phiSEXP, SEXP tau_betaSEXP, SEXP a_omegaSEXP, SEXP b_omegaSEXP, SEXP a_piSEXP, SEXP b_piSEXP, SEXP a_pSEXP, SEXP b_pSEXP, SEXP a_muSEXP, SEXP b_muSEXP, SEXP a_phiSEXP, SEXP b_phiSEXP, SEXP a_betaSEXP, SEXP b_betaSEXP, SEXP mu0_meanSEXP, SEXP beta_limSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_vec(z_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mukj(tau_mukjSEXP);
    Rcpp::traits::input_parameter< int >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type burn_rate(burn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type tau_mu0(tau_mu0SEXP);
    Rcpp::traits::input_parameter< double >::type tau_phi(tau_phiSEXP);
    Rcpp::traits::input_parameter< double >::type tau_beta(tau_betaSEXP);
    Rcpp::traits::input_parameter< double >::type a_omega(a_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type b_omega(b_omegaSEXP);
    Rcpp::traits::input_parameter< double >::type a_pi(a_piSEXP);
    Rcpp::traits::input_parameter< double >::type b_pi(b_piSEXP);
    Rcpp::traits::input_parameter< double >::type a_p(a_pSEXP);
    Rcpp::traits::input_parameter< double >::type b_p(b_pSEXP);
    Rcpp::traits::input_parameter< double >::type a_mu(a_muSEXP);
    Rcpp::traits::input_parameter< double >::type b_mu(b_muSEXP);
    Rcpp::traits::input_parameter< double >::type a_phi(a_phiSEXP);
    Rcpp::traits::input_parameter< double >::type b_phi(b_phiSEXP);
    Rcpp::traits::input_parameter< double >::type a_beta(a_betaSEXP);
    Rcpp::traits::input_parameter< double >::type b_beta(b_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mu0_mean(mu0_meanSEXP);
    Rcpp::traits::input_parameter< double >::type beta_lim(beta_limSEXP);
    rcpp_result_gen = Rcpp::wrap(zinb_w_cov(Y_mat, X_mat, z_vec, s_vec, tau_mukj, S, burn_rate, tau_mu0, tau_phi, tau_beta, a_omega, b_omega, a_pi, b_pi, a_p, b_p, a_mu, b_mu, a_phi, b_phi, a_beta, b_beta, mu0_mean, beta_lim));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IntegrativeBayes_zinb_w_cov", (DL_FUNC) &_IntegrativeBayes_zinb_w_cov, 24},
    {NULL, NULL, 0}
};

RcppExport void R_init_IntegrativeBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
